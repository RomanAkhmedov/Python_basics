'''
Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
округление значения до целого числа.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.
'''
from textwrap import wrap


class Cell:
    cells = 0

    def __init__(self, numb_of_cells):
        self.numb_of_cells = numb_of_cells
        Cell.cells += 1

    def __str__(self):
        return '*' * self.numb_of_cells

    def __add__(self, other):
        result = self.numb_of_cells + other.numb_of_cells
        Cell.cells -= 2
        return f'Сумма двух клеток: {Cell(result)}'

    def __sub__(self, other):
        result = self.numb_of_cells - other.numb_of_cells
        if result <= 0:
            print('Вычитание клеток невозможно')
        else:
            Cell.cells -= 1
            return f'Разность двух клеток: {Cell(result)}'

    def __mul__(self, other):
        result = self.numb_of_cells * other.numb_of_cells
        Cell.cells -= 2
        return f'Произведение двух клеток: {Cell(result)}'

    def __truediv__(self, other):
        result = self.numb_of_cells // other.numb_of_cells
        Cell.cells -= 2
        return f'Частное двух клеток: {Cell(result)}'

    @staticmethod
    def cell_stats():
        return f'Текущее число клеток: {Cell.cells}'

    def make_order(self, numb_in_array):
        array = '*' * self.numb_of_cells
        return '\n'.join(wrap(array, width=numb_in_array))


first_cell = Cell(24)
print(f'Клетка 1: {first_cell}')
second_cell = Cell(3)
print(f'Клетка 2: {second_cell}')
print(first_cell / second_cell)
print(Cell.cell_stats())
print(first_cell.make_order(7))
